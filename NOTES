/**
*   ServeD - NOTES
*
*   © Copyright 2009-2013 Daniel Dettlaff. ® All Rights Reserved.
*/


/*
#
# Some ServeD-Dispel specifics, ideas, details and explanations (proof of concept, nothing specific):
#
#
# Glossary:
#   Node            - a phisical system agnostic machine, POSIX compliant OS.
#   Job             - any user request available from API/ Web panel.
#   JobMessage      - JSON format API message that's generated from a Job.
#


#
# A) [Change DNS domain for rails app scenario]
#   1. I log in to panel.mydomain.com and pick my "application name" from the list.
#   2. I just deployed my new dynamic web application on 4 of 8, of my production Nodes five minutes ago.
#      (These nodes are already all bound together into one network).
#   3. My web application started after I deployed it. It listens on some development DNS domain name.
#   4. I perform modification of DNS entry on application's panel. I pick to use IP from generated
#      development for my domain. (Change record "A", "MX", "SRV", "TXT" or "CNAME" of my domain).
#   5. I pick to save my changes changes.
#
#
# B) [Decoded JSON request example]
#

"JobMessage": {
    "request": {
        "job-sha": "728h4f3…sdfsdfdsf",                     # Message checksum (made without content of job-sha)
        "api-cmd": "API_ACTION_IDENTIFIER",                 # API call, for 3rd party access
        "related_with": [
            "mike", "roger", "ksawery", "stefan"            # list of user names used with user applications
        ],
        "timestamp": 12345678901234567890                   # microseconds from 1970
    }
}


#
# C) [Under the hood message processing model on Dispel side]
#
#   1. Current Node (picked by DNS round robin) validates Job
#   2. Current Node publishes Job notification to all known Nodes (with "related_with" list of users)
#   3. Each node is subscribing published Job from current Node.
#   4. Node(s) that confirm(s) existance of app on local side, publish(es) updated response to rest of Nodes.
#

#
# D) [Decoded JSON response example]
#

"JobReply": {
    "request": {
        "job-sha": "728h4f3…sdfsdfdsf",
        "api-request": "API_ACTION_IDENTIFIER",
        "related_with": [
            "mike", "roger", "ksawery", "stefan"           # list of user names with user applications
        ],
        "timestamp": 12345678901234567890                  # request timestamp - microseconds from 1970
    },

    "responses": [
        "unique-server999-uuid": {
            "role": "normal",                              # Roles:
                                                           #
                                                           #      "normal" - regular node, with available
                                                           #                 file system replication feature.
                                                           #                 role optimized for cpu intensive
                                                           #                 multithreaded applications.
                                                           #
                                                           #    "database" - database node, with file system
                                                           #                 replication unavailable.
                                                           #                 this role is optimized for
                                                           #                 maximum IO performance.
                                                           #
                                                           #
                                                           #      "backup" - backup node, only takes requests
                                                           #                 for backing up user applications
                                                           #                 and data from database nodes.
                                                           #

            "related_found": [                             # request results with …

                "mike": {                                  # … user "mike" …

                    "domain": "app.domain.com",                      # domain used by app on "unique-server999-uuid" node
                                                                     # if domain doesn't points to current server
                                                                     # the default behavior is fallback to autogenerated
                                                                     # public DNS domain

                    "modifiedAt": 123543,                            # microseconds since last change
                    "nodes": [
                        "unique-server46-uuid": "500.600.700.808",  # … and user "mike" exists on these nodes
                        "unique-server999-uuid": "500.600.700.809"
                    ]
                },
                "ksawery": {
                    …
                }
            ],
            "system_load": {                                # system load details, count to help pick new distribution nodes
                "cpu-usage-value": "…",
                "mem-usage-value": "…",
                "io-usage-value": "…"
            },
            "api_response": "…",                            # any content returned from API
            "timestamp": 12345678901234567890               # response timestamp - microseconds from 1970
        },

        "unique-some-server-uuid": {
            …
        }
    }
}




#
# Files with super user access only (all defined in dispel_core.h):
#
#
# 1. File: DISPEL_NODE_IDENTIFICATION_FILE example content:
#
# ["server identifier": "ip address", …]

[
    "unique-server1-uuid": "500.600.700.806",
    "unique-server2-uuid": "500.600.700.807",
    "unique-server46-uuid": "500.600.700.808",
    "unique-server999-uuid": "500.600.700.809"
]

*/


/**
*   Copyright © 2010-2013 verknowsys.com. ® All rights reserved
*/

