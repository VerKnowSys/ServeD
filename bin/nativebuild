#!/bin/sh


sanity_checks() {

    printf "Performing sanity checks..\n"
    if [ "$(id -u)" = "0" ]; then
        . /etc/profile_sofin
    else
        . ${HOME}/.profile
    fi

    if [ ! -x "/usr/bin/sofin" ]; then
        printf "ERROR: Sofin is unavailable! Please install it first.\n"
        exit 1
    fi
    if [ -f "/etc/sofin.conf.sh" ]; then
        . "/etc/sofin.conf.sh"
        note "Loaded Sofin config.."
    else
        printf "ERROR: Sofin configuration file is unavailable! Please install Sofin first.\n"
        exit 1
    fi
    # note "Checking availability of Pkg-config.."
    # tmp="$(which pkgconf 2> /dev/null)"
    # if [ ! -x "${tmp}" ]; then
    #     note "ERROR: It seems that Pkg-config isn't installed. Please install it, by doing 'sofin get pkgconf'!"
    #     exit 1
    # fi
    note "Checking availability of Qt4 library.."
    tmp="$(which qmake 2> /dev/null)"
    if [ ! -x "${tmp}" ]; then
        note "ERROR: Sofin base wasn't installed properly, or Qt4 was removed by super user. Please install it, by doing 'sofin get base' as super user!"
        exit 1
    fi
}


build () {
    QMAKE_OPTS=""
    case "${SYSTEM_NAME}" in
        Darwin)
            QMAKE_OPTS="-spec darwin-g++"
            ;;
    esac

    for _project in $(find $(pwd)/ -maxdepth 1 -name '*.pro' -type f); do
        project="$(${BASENAME_BIN} "${_project}")"
        (qmake ${QMAKE_OPTS} ${project} 2> /dev/null 1>&2) || exit 1
        (make ${MAKE_OPTS} && note "Project: ${project} built successfully!") || exit 1
    done

}


# check all major software requirements:
sanity_checks

note "Building ServeD Natives.."
if [ "${SYSTEM_NAME}" = "Darwin" ]; then
    time build
else
    build
fi
