#!/bin/sh
# @author dmilith

unset JDK7

CC="gcc"
CXX="g++"
STRIP="strip"
FLAGS="-Os -fPIC"
UNAME="/usr/bin/uname"

SYSTEM="$(uname)"
ARCH="$(uname -p)"
DEVEL="false"

if [ "$1" = "devel" ]; then
    export DEVEL="true"
elif [ "$1" = "7" ]; then
    export JDK7=1
    export FLAGS="$FLAGS -DJDK7"
fi

if [ "$DEVEL" = "true" ]; then
    echo "Devel enabled"
    export FLAGS="$FLAGS -DDEVEL"
fi

if [ "$2" = "7" ]; then
    export JDK7=1
    export FLAGS="$FLAGS -DJDK7"
fi

if [ -e "/usr/bin/clang++" ]; then
    CXX="clang++"
    CC="clang"
fi

echo "System: $SYSTEM, Arch: ${ARCH}"
echo "C compiler: $CC"
echo "C++ compiler: $CXX"
echo "Flags: $FLAGS"
if [ -z "$JDK7" ]; then
    echo "Platform: Java 1.6"
else
    echo "Platform: Java: 1.7"
fi
echo

check() {
    if [ "$1" = "0" ]; then
        echo "* $2 => Compiled Sucessfully"
        if [ "$DEVEL" != "true" ]; then
            if [ "$3" != "" ]; then
                echo "  Stripping $3"
                $STRIP $3
            fi
        fi
    else
        echo "* $2 => Failure"
        exit 1
    fi
}


$CXX $FLAGS -c lib/kickstart/core.cc -o lib/core.o
check $? "Core"

$CXX $FLAGS -c lib/kickstart/utils.cc -o lib/utils.o
check $? "Utils"

$CXX $FLAGS lib/kickstart/shell.cc -o shell lib/utils.o
check $? "UserShell" "shell"

$CXX $FLAGS lib/kickstart/daemon.cc -o daemon lib/utils.o
check $? "UserDaemon" "daemon"


$CXX $FLAGS lib/kickstart/kick.cc -o kick lib/core.o lib/utils.o
check $? "KickStart" "kick"

if [ "$SYSTEM" = "FreeBSD" ]; then
    fbsd_process () {
        postfix="${1}"
        $CXX $FLAGS -shared lib/kickstart/usage_sys.cc -o lib/libusagesys${postfix}.so lib/utils.o -lutil -lprocstat -lkvm
        check $? "UsageSysLib" "lib/libusagesys${postfix}.so"
        $CXX $FLAGS lib/kickstart/usage_gather.cc -o usage_gather lib/libusagesys${postfix}.so lib/utils.o -lutil -lprocstat -lkvm
        check $? "UsageGather" "usage_gather"
        $CXX $FLAGS -shared lib/kickstart/stat.cc -o lib/libstat${postfix}.so
        check $? "StatLib" "lib/libstat${postfix}.so"
        $CXX $FLAGS -shared lib/kickstart/system_time.cc -o lib/libsystemtime${postfix}.so -lrt
        check $? "SystemTimeLib" "lib/libsystemtime${postfix}.so"
    }
    if [ "${ARCH}" = "i386" ]; then
        fbsd_process "32"
    else # x86_64
        fbsd_process
    fi
fi

if [ "$SYSTEM" = "Darwin" ]; then
    $CXX $FLAGS -arch i386 -arch x86_64 -shared lib/kickstart/usage_sys.cc -o lib/libusagesys.dylib lib/utils.o
    check $? "UsageSysLib"

    $CXX $FLAGS -arch i386 -arch x86_64 lib/kickstart/usage_gather.cc -o usage_gather lib/libusagesys.dylib lib/utils.o -lutil
    check $? "UsageGather" "usage_gather"

    $CXX $FLAGS -arch i386 -arch x86_64 -shared lib/kickstart/stat.cc -o lib/libstat.dylib
    check $? "StatLib"

    $CXX $FLAGS -arch i386 -arch x86_64 -shared lib/kickstart/system_time.cc -o lib/libsystemtime.dylib
    check $? "SystemTimeLib"

fi

if [ "$SYSTEM" = "Linux" ]; then
    $CXX $FLAGS -shared lib/kickstart/system_time.cc -o lib/libsystemtime.so -lrt
    check $? "SystemTimeLib" "lib/libsystemtime.so"
fi


# FANN library build:
FANN_FLAGS="-pedantic"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann_cascade.c -o lib/fann_cascade.o
check $? "FANN cascade"
$CC $FLAGS $FANN_FLAGS -c lib/fann/doublefann.c -o lib/doublefann.o
check $? "FANN double"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann_error.c -o lib/fann_error.o
check $? "FANN error"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann_io.c -o lib/fann_io.o
check $? "FANN IO"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann_train.c -o lib/fann_train.o
check $? "FANN train"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann_train_data.c -o lib/fann_train_data.o
check $? "FANN train data"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fixedfann.c -o lib/fixedfann.o
check $? "FANN fixed"
$CC $FLAGS $FANN_FLAGS -c lib/fann/floatfann.c -o lib/floatfann.o
check $? "FANN float"
$CC $FLAGS $FANN_FLAGS -c lib/fann/fann.c -o lib/fann.o
check $? "FANN main"

if [ "$SYSTEM" = "Darwin" ]; then
    $CC $FLAGS $FANN_FLAGS -arch x86_64 -shared -o lib/libfann.dylib lib/fann.o lib/fann_train_data.o lib/fann_train.o lib/fann_io.o lib/fann_error.o lib/fann_cascade.o
    check $? "FANN library"

    $CC $FLAGS $FANN_FLAGS -arch x86_64 -shared -o lib/libfann-fixed.dylib lib/fixedfann.o
    check $? "FANN fixed library" "lib/libfann-fixed.dylib"

    $CC $FLAGS $FANN_FLAGS -arch x86_64 -shared -o lib/libfann-float.dylib lib/floatfann.o
    check $? "FANN float library" "lib/libfann-float.dylib"

    $CC $FLAGS $FANN_FLAGS -arch x86_64 -shared -o lib/libfann-double.dylib lib/doublefann.o
    check $? "FANN double library" "lib/libfann-double.dylib"
else
    $CC $FLAGS $FANN_FLAGS -shared -o lib/libfann.so lib/fann.o lib/fann_train_data.o lib/fann_train.o lib/fann_io.o lib/fann_error.o lib/fann_cascade.o
    check $? "FANN library" "lib/libfann.so"

    $CC $FLAGS $FANN_FLAGS -shared -o lib/libfann-fixed.so lib/fixedfann.o
    check $? "FANN fixed library" "lib/libfann-fixed.so"

    $CC $FLAGS $FANN_FLAGS -shared -o lib/libfann-float.so lib/floatfann.o
    check $? "FANN float library" "lib/libfann-float.so"

    $CC $FLAGS $FANN_FLAGS -shared -o lib/libfann-double.so lib/doublefann.o
    check $? "FANN double library" "lib/libfann-double.so"
fi

